(define (exp b n)
  (define (exp-iter product counter)
    (if (= counter 0)
	product
	(exp-iter (* product b) 
		  (- counter 1))))
  (define (exp-log-iter product counter)
    (cond ((= counter 0) product)
	  ((even? counter) 
	   (exp-log-iter ((lambda (x)(* x x)) product)
			 (/ counter 2)))
	  (else (exp-log-iter (* product b) 
			      (- counter 1)))))
  (exp-log-iter 1 n))

(load "../../util/unittest.ss")
(asserteq (exp 9 3) (* 9 9 9)) 
(asserteq (exp 9 9) (* 9 9 9 9 9 9 9 9 9)) 
